import ply.yacc as yacc
from lexer import tokens
import math
import random


def p_expression_add(p):
    """expression : expression expression ADD"""
    p[0] = p[1] + p[2]


def p_expression_sub(p):
    """expression : expression expression SUB"""
    p[0] = p[1] - p[2]


def p_expression_mul(p):
    """expression : expression expression MUL"""
    p[0] = p[1] * p[2]


def p_expression_div(p):
    """expression : expression expression DIV"""
    p[0] = p[1] / p[2]


def p_expression_idiv(p):
    """expression : expression expression IDIV"""
    p[0] = p[1] / p[2]


def p_expression_mod(p):
    """expression : expression expression MOD"""
    p[0] = p[1] % p[2]


def p_expression_abs(p):
    """expression : expression ABS"""
    p[0] = abs(p[1])


def p_expression_neg(p):
    """expression : expression NEG"""
    p[0] = -p[1]


def p_expression_ceiling(p):
    """expression : expression CEILING"""
    p[0] = math.ceil(p[1])


def p_expression_floor(p):
    """expression : expression FLOOR"""
    p[0] = math.floor(p[1])


def p_expression_round(p):
    """expression : expression ROUND"""
    p[0] = round(p[1])


def p_expression_truncate(p):
    """expression : expression TRUNCATE"""
    p[0] = int(p[1])


def p_expression_sqrt(p):
    """expression : expression SQRT"""
    p[0] = math.sqrt(p[1])


def p_expression_sqrt(p):
    """expression : expression SQRT"""
    p[0] = float(math.sqrt(p[1]))


def p_expression_atan(p):
    """expression : expression expression ATAN"""
    p[0] = math.degrees(math.atan(p[1]/p[2]))


def p_expression_cos(p):
    """expression : expression COS"""
    p[0] = float(math.cos(p[1]))


def p_expression_sin(p):
    """expression : expression SIN"""
    p[0] = float(math.sin(p[1]))


def p_expression_exp(p):
    """expression : expression expression EXP"""
    p[0] = float(p[1]**p[2])


def p_expression_ln(p):
    """expression : expression LN"""
    p[0] = math.log(p[1])


def p_expression_log(p):
    """expression : expression LOG"""
    p[0] = math.log10(p[1])


def p_expression_rand(p):
    """expression : RAND"""
    p[0] = random.randint(0, 2147483647)


def p_expression_srand(p):
    """expression : expression SRAND"""
    random.seed(p[1])


def p_expression_xor(p):
    """expression : expression expression XOR"""
    p[0] = p[1] ^ p[2]


def p_expression_term(p):
    """expression : term"""
    p[0] = p[1]


def p_term_factor(p):
    """term : factor"""
    p[0] = p[1]


def p_expression_integer(p):
    """expression : INTEGER"""
    p[0] = p[1]


def p_expression_real(p):
    """expression : REAL"""
    p[0] = p[1]


def p_factor_expr(p):
    """factor : LPAREN expression RPAREN"""
    p[0] = p[2]


# Error rule for syntax errors
def p_error(p):
    print("Syntax error in input!")


# Build the parser
parser = yacc.yacc()
while True:
    try:
        s = input('calc > ')
    except EOFError:
        break
    if not s:
        continue
    result = parser.parse(s)
    print(result)