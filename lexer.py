import ply.lex as lex

reserved = {
    'exch': 'EXCH',
    'dup': 'DUP',
    'copy': 'COPY',
    'index': 'INDEX',
    'roll': 'ROLL',
    'clear': 'CLEAR',
    'count': 'COUNT',
    'cleartomark': 'CLEARTOMARK',
    'counttomark': 'COUNTTOMARK',

    'add': 'ADD',
    'sub': 'SUB',
    'mul': 'MUL',
    'div': 'DIV',
    'idiv': 'IDIV',
    'mod': 'MOD',
    'abs': 'ABS',
    'neg': 'NEG',
    'ceiling': 'CEILING',
    'floor': 'FLOOR',
    'round': 'ROUND',
    'truncate': 'TRUNCATE',
    'sqrt': 'SQRT',
    'atan': 'ATAN',
    'cos': 'COS',
    'sin': 'SIN',
    'exp': 'EXP',
    'ln': 'LN',
    'log': 'LOG',
    'rand': 'RAND',
    'srand': 'SRAND',
    'rrand': 'RRAND',
    'xor': 'XOR',
    'def': 'DEF',

    'array': 'ARRAY',
    'length': 'LENGTH',
    'get': 'GET',
    'put': 'PUT',
    'getinterval': 'GETINTERVAL',
    'putinterval': 'PUTINTERVAL',
    'astore': 'ASTORE',
    'aload': 'ALOAD',
    'forall': 'FORALL',
}

# List of token names.   This is always required
tokens = [
             'LPAREN',
             'RPAREN',
             'LBRACE',
             'RBRACE',
             'LBRACKET',
             'RBRACKET',
             'DEFINE_LITERAL',
             'REAL',
             'INTEGER'
         ] + list(reserved.values())

# Regular expression rules for simple tokens
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_LBRACE = r'\{'
t_RBRACE = r'\}'
t_LBRACKET = r'\['
t_RBRACKET = r'\]'
t_DEFINE_LITERAL = r'\/(.*)'


def t_ID(t):
    r""" [a-zA-Z_][a-zA-Z_0-9]*"""
    t.type = reserved.get(t.value, 'ID')  # Check for reserved words
    return t


# A regular expression rule with some action code
def t_REAL(t):
    r"""[+-]?\d+\.\d+"""
    t.value = float(t.value)
    return t


def t_INTEGER(t):
    r"""[+-]?\d+"""
    t.value = int(t.value)
    return t


# Define a rule so we can track line numbers
def t_newline(t):
    r"""\n+"""
    t.lexer.lineno += len(t.value)


# A string containing ignored characters (spaces and tabs)
t_ignore = ' \t'


# Error handling rule
def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)


# Build the lexer
lexer = lex.lex()